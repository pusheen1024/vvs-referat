Людям, незнакомым с форматом олимпиадных задач по программированию, они могут показаться достаточно необычными. Действительно, вместо стандартной учебной задачи, направленной на закрепление пройденных конструкций языка программирования, или промышленного проекта, заключающегося в создании востребованного приложения, вас могут попросить посчитать максимальную сумму на подотрезке массива, который был подарен Поликарпу на день рождения. Но для спортивных программистов такие условия кажутся обычными.

Классическое условие олимпиадной задачи состоит из следующих частей:
\begin{enumerate}
    \item \textit{Легенда задачи}. Эта часть не является обязательной, но нередко используется для того, чтобы сделать условие задачи более интересным, представляет собой короткий рассказ. Нередко легенда имеет некоторый <<региональный колорит>>, так, например, вышеупомянутый персонаж Поликарп и Монокарп, равно как и вымышленная страна Берляндия, были придуманы в стенах Саратовского ГУ \cite{berland}.
    \item \textit{Условие задачи}. Сама постановка задачи, то есть описание того, что нужно сделать. Может быть более или менее формализованным: иногда постановка задачи изложена в строгих терминах, а иногда участник должен самостоятельно свести её к строгой математической модели. Если в условии используются какие"=либо специальные термины, то пояснение к ним обычно даётся либо в самом условии, либо в примечании к нему.
    \item \textit{Формат входных и выходных данных}. В олимпиадных задачах отсутствуют комментарии к вводу и выводу (например, <<введите элементы массива через пробел>>), более того, решение, выводящее что"=либо кроме ответа на задачу, или решение, выводящее ответ в некорректном формате, зачтено не будет, даже если сам ответ является правильным. В этом же разделе приводятся ограничения на входные данные: для вводимых чисел это, как правило, нижняя и верхняя граница диапазона, в котором они находятся (например, $2 \leqslant n \leqslant 2 \cdot 10^5$). Нижняя граница необходима для обработки крайних случаев "--- к примеру, задача может не иметь смысла, если длина массива равна 1, но при этом в нём требуется найти два числа, удовлетворяющих некоторому условию; тогда как верхняя граница зачастую указывает на асимптотику используемого алгоритма и на типы данных, которые необходимы для сохранения входных данных.
    \item \textit{Примеры}. Обычно это несколько первых тестов, в которые авторы задачи стараются включить некоторые крайние случаи. Примеры дают возможность протестировать программу локально и не отправлять в систему заведомо некорректное решение.
    \item \textit{Ограничения по времени и памяти}. Суть олимпиадных задач заключается в том, чтобы придумать и реализовать не только корректное, но и оптимальное решение. При тестировании решения засекается время, используемое им (особенно это важно на максимальных тестах), а также количество выделенной памяти. При превышении одного из этих параметров решение моментально перестаёт тестироваться, чтобы избежать чрезмерной нагрузки на систему, и получает вердикт TLE (Time Limit Exceeded) или MLE (Memory Limit Exceeded).
\end{enumerate}

Отдельно нужно сказать о тестировании решений. При отправке решения в систему нужно выбрать компилятор/интерпретатор языка программирования, на котором написан код, и его версию (обычно поддерживается несколько последних версий). Как правило, на соревнованиях по программированию участники используют языки C++ и Python, изредка Java, C, Kotlin, но иногда в тестирующих системах можно встретить и более редкие языки программирования. Затем решения запускаются в системе на заранее подготовленном наборе тестов. Существует две принципиальных системы оценивания решений: ICPC"=style и OI"=style. В первом случае решение тестируется до первого теста, на котором оно <<упало>>. Решение может получить один из следующих вердиктов:
\begin{itemize}
    \item AC (accepted): прошло все тесты;
    \item WA (wrong answer): ответ, посчитанный программой, не совпал с правильным;
    \item TLE (time limit exceeded): превышено ограничение времени;
    \item MLE (memory limit exceeded): превышено ограничение памяти;
    \item CE (compilation error): решение не компилируется;
    \item RE (runtime error): ошибка исполнения, т.е. программа выбросила исключение в процессе работы;
    \item ILE (idleness limit exceeded): решение зависло, например, ждёт ввод, которого нет;
\end{itemize}

Во втором случае решение тестируется либо на всех тестах вне зависимости от результата на каждом из них, либо же тесты разделяются на подгруппы, объединённые в зависимости от дополнительных ограничений, наложенных на входные данные в каждой из подгрупп (обычно решение опредёленной подгруппы более простое, чем полное решение всей задачи). В первом случае за решение одной задачи, вне зависимости от её сложности, даётся один балл, при равенстве количества решённых задач для сравнения результатов участников используется такая характеристика, как штраф. Штраф складывается из времени, в которое участник сдал каждую задачу, а также количества ошибочных посылок, предшествующих правильному решению каждой задачи, умноженного на некоторый коэффициент. Именно поэтому в олимпиадном программировании важно умение быстро придумывать решение и реализовывать его грамотно и без ошибок с первого раза. Во втором же случае за подгруппы или тесты начисляются частичные баллы, пропорциональные количеству пройденных тестов. Однако нужно упомянуть, что на различных олимпиадах, а также онлайн"=площадках для тренировки, правила соревнований, равно как и система оценивания, могут отличаться.
